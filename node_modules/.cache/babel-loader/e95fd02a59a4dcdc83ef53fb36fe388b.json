{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/hyperion/Dev/Codesmith/BetterImage/BetterImage.JS/src/components/BetterImage/BetterImage.js\";\nimport React from 'react';\nimport { Img } from 'react-image';\nexport default function BetterImage(props) {\n  ////////////////////* Hoisted Variables *////////////\n  let {\n    resize,\n    source,\n    quality,\n    rotation,\n    blur,\n    grayscale,\n    brightness,\n    contrast,\n    sepia,\n    invert,\n    saturate,\n    opacity,\n    hueRotate,\n    dropShadow,\n    roundCorners,\n    border,\n    matrix,\n    translate,\n    scale,\n    skew,\n    perspective,\n    rotateX,\n    rotateY\n  } = props;\n  const fileName = source.split('/').pop();\n  const originalImageType = fileName.split('.').pop();\n  const imgName = fileName.split('.').shift();\n  let resizedImageWidth;\n  let resizedImageHeight;\n  let shadowX;\n  let shadowY;\n  let shadowSize;\n  let shadowColor;\n  let borderColor;\n  let borderThick;\n  let borderLine;\n  let matrix1;\n  let matrix2;\n  let matrix3;\n  let matrix4;\n  let matrix5;\n  let matrix6;\n  let translatePx;\n  let translatePercent;\n  let scaleX;\n  let scaleY;\n  let skewX;\n  let skewY; //////////////////////* Params Organized */////////////////////\n\n  function resizeFunc(string) {\n    string = string.split(\"x\");\n    resizedImageHeight = string[0];\n    resizedImageWidth = string[1];\n  }\n\n  function borderImage(string) {\n    string = string.split(\",\");\n    borderThick = string[0];\n    borderLine = string[1];\n    borderColor = string[2];\n  }\n\n  function shadowImg(dropShadow) {\n    dropShadow = dropShadow.split(\",\");\n    shadowX = dropShadow[0];\n    shadowY = dropShadow[1];\n    shadowSize = dropShadow[2];\n    shadowColor = dropShadow[3];\n  }\n\n  function matrixImg(matrix) {\n    matrix = matrix.split(\",\");\n    matrix1 = matrix[0];\n    matrix2 = matrix[1];\n    matrix3 = matrix[2];\n    matrix4 = matrix[3];\n    matrix5 = matrix[4];\n    matrix6 = matrix[5];\n  }\n\n  function translateImg(translate) {\n    translate = translate.split(\",\");\n    translatePx = translate[0];\n    translatePercent = translate[1];\n  }\n\n  function scaleImg(scale) {\n    scale = scale.split(\",\");\n    scaleX = scale[0];\n    scaleY = scale[1];\n  }\n\n  function skewImg(skew) {\n    skew = skew.split(\",\");\n    skewX = skew[0];\n    skewY = skew[1];\n  }\n\n  function convertedImg(imgName, quality, originalImageType) {\n    fetch('/api/convert', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        imageName: imgName,\n        quality: quality,\n        originalImageType: originalImageType\n      })\n    });\n  } ////////////////////* Dynamic Imports */////////////////////\n\n\n  function importAll(r) {\n    let images = {};\n    r.keys().map(item => {\n      images[item.replace('./', '')] = r(item);\n    });\n    return images;\n  }\n\n  const images = importAll(require.context('./convertedImage', false, /\\.(png|jpe?g|webp|svg)$/)); /////////////////* Default Chain *//////////////////////////\n\n  function chainParameters() {\n    if (resize != null) {\n      resizeFunc(resize);\n    }\n\n    if (contrast == null) contrast = 100;\n    if (sepia == null) sepia = 0;\n    if (saturate == null) saturate = 100;\n    if (blur == null) blur = 0;\n    if (opacity == null) opacity = 100;\n    if (brightness == null) brightness = 100;\n    if (grayscale == null) grayscale = 0;\n    if (rotation == null) rotation = 0;\n    if (invert == null) invert = 0;\n    if (hueRotate == null) hueRotate = 0;\n    if (roundCorners == null) roundCorners = 0;\n    if (perspective == null) perspective = 0;\n    if (quality == null) quality = 100;\n    if (rotateX == null) rotateX = 0;\n    if (rotateY == null) rotateY = 0;\n\n    if (dropShadow == null) {\n      shadowX = 0;\n      shadowY = 0;\n      shadowSize = 0;\n      shadowColor = \"black\";\n    } else {\n      shadowImg(dropShadow);\n    }\n\n    if (border == null) {\n      borderThick = 0;\n      borderLine = \"solid\";\n      borderColor = \"black\";\n    } else {\n      borderImage(border);\n    }\n\n    if (matrix == null) {\n      matrix1 = 1;\n      matrix2 = 0;\n      matrix3 = 0;\n      matrix4 = 1;\n      matrix5 = 0;\n      matrix6 = 0;\n    } else {\n      matrixImg(matrix);\n    }\n\n    if (translate == null) {\n      translatePx = 0;\n      translatePercent = 0;\n    } else {\n      translateImg(translate);\n    }\n\n    if (scale == null) {\n      scaleX = 1;\n      scaleY = 1;\n    } else {\n      scaleImg(scale);\n    }\n\n    if (skew == null) {\n      skewX = 0;\n      skewY = 0;\n    } else {\n      skewImg(skew);\n    }\n  } ////////////////////* Render BI */////////////////////\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [chainParameters(), images[`${imgName}.webp`] ? /*#__PURE__*/_jsxDEV(Img, {\n      src: [images[`${imgName}.webp`], images['placeholder.webp']],\n      style: {\n        filter: `grayscale(${grayscale}%) blur(${blur}px) brightness(${brightness}%) contrast(${contrast}%) sepia(${sepia}%) invert(${invert}%) saturate(${saturate}%) opacity(${opacity}%) hue-rotate(${hueRotate}deg) drop-shadow(${shadowX}px ${shadowY}px ${shadowSize}px ${shadowColor})`,\n        transform: `matrix(${matrix1}, ${matrix2}, ${matrix3}, ${matrix4}, ${matrix5}, ${matrix6}) translate(${translatePx}px, ${translatePercent}%) scale(${scaleX}, ${scaleY}) skew(${skewX}deg, ${skewY}deg) rotateX(${rotateX}deg) rotateY(${rotateY}deg) perspective(${perspective}px) rotate(${rotation}deg)`,\n        width: `${resizedImageWidth}px`,\n        height: `${resizedImageHeight}px`,\n        borderRadius: `${roundCorners}px`,\n        border: `${borderThick}px ${borderLine} ${borderColor}`\n      },\n      alt: \"image failed to load\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 36\n    }, this) : convertedImg(imgName, quality, originalImageType)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n}\n_c = BetterImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"BetterImage\");","map":{"version":3,"sources":["/Users/hyperion/Dev/Codesmith/BetterImage/BetterImage.JS/src/components/BetterImage/BetterImage.js"],"names":["React","Img","BetterImage","props","resize","source","quality","rotation","blur","grayscale","brightness","contrast","sepia","invert","saturate","opacity","hueRotate","dropShadow","roundCorners","border","matrix","translate","scale","skew","perspective","rotateX","rotateY","fileName","split","pop","originalImageType","imgName","shift","resizedImageWidth","resizedImageHeight","shadowX","shadowY","shadowSize","shadowColor","borderColor","borderThick","borderLine","matrix1","matrix2","matrix3","matrix4","matrix5","matrix6","translatePx","translatePercent","scaleX","scaleY","skewX","skewY","resizeFunc","string","borderImage","shadowImg","matrixImg","translateImg","scaleImg","skewImg","convertedImg","fetch","method","headers","body","JSON","stringify","imageName","importAll","r","images","keys","map","item","replace","require","context","chainParameters","filter","transform","width","height","borderRadius"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Img } from 'react-image';\n\nexport default function BetterImage(props) {\n\n  ////////////////////* Hoisted Variables *////////////\n  let { resize, source, quality, rotation, blur, grayscale, brightness, contrast, sepia, invert, saturate, opacity, hueRotate, dropShadow, roundCorners, border, matrix, translate, scale, skew, perspective, rotateX, rotateY } = props;\n\n  const fileName = source.split('/').pop();\n  const originalImageType = fileName.split('.').pop();\n  const imgName = fileName.split('.').shift();\n\n  let resizedImageWidth;\n  let resizedImageHeight;\n  let shadowX;\n  let shadowY;\n  let shadowSize;\n  let shadowColor;\n  let borderColor;\n  let borderThick;\n  let borderLine;\n  let matrix1;\n  let matrix2;\n  let matrix3;\n  let matrix4;\n  let matrix5;\n  let matrix6;\n  let translatePx;\n  let translatePercent;\n  let scaleX;\n  let scaleY;\n  let skewX;\n  let skewY;\n\n  //////////////////////* Params Organized */////////////////////\n  function resizeFunc(string) {\n    string = string.split(\"x\");\n    resizedImageHeight = string[0]\n    resizedImageWidth = string[1]\n  }\n\n  function borderImage(string){\n    string = string.split(\",\");\n    borderThick = string[0];\n    borderLine = string[1];\n    borderColor = string[2];\n  }\n  \n  function shadowImg(dropShadow){\n    dropShadow = dropShadow.split(\",\");\n    shadowX = dropShadow[0];\n    shadowY = dropShadow[1];\n    shadowSize = dropShadow[2];\n    shadowColor = dropShadow[3];\n  }\n\n  function matrixImg(matrix){\n    matrix = matrix.split(\",\");\n    matrix1 = matrix[0];\n    matrix2 = matrix[1];\n    matrix3 = matrix[2];\n    matrix4 = matrix[3];\n    matrix5 = matrix[4];\n    matrix6 = matrix[5];\n  }\n\n  function translateImg(translate){\n    translate = translate.split(\",\");\n    translatePx = translate[0];\n    translatePercent = translate[1];\n  }\n\n  function scaleImg(scale){\n    scale = scale.split(\",\");\n    scaleX = scale[0];\n    scaleY = scale[1];\n  }\n\n  function skewImg(skew){\n    skew = skew.split(\",\");\n    skewX = skew[0];\n    skewY = skew[1];\n  }\n\n  function convertedImg(imgName, quality, originalImageType){\n    fetch('/api/convert', {\n      method: 'POST',\n      headers: {\n         'Content-Type': 'application/json' \n         },\n        body: JSON.stringify({\n          imageName: imgName,\n          quality: quality,\n          originalImageType: originalImageType\n        })\n    })\n  }\n\n  ////////////////////* Dynamic Imports */////////////////////\n  function importAll(r) {\n    let images = {};\n    r.keys().map((item) => { images[item.replace('./', '')] = r(item) })\n    return images;\n  }\n\n  const images = importAll(require.context('./convertedImage', false, /\\.(png|jpe?g|webp|svg)$/));\n\n  /////////////////* Default Chain *//////////////////////////\n    function chainParameters(){\n      if (resize != null) {\n        resizeFunc(resize);\n      }\n      if (contrast == null) contrast = 100;\n      if (sepia == null) sepia = 0;\n      if (saturate == null) saturate = 100;\n      if (blur == null) blur = 0;\n      if (opacity == null) opacity = 100;\n      if (brightness == null) brightness = 100;\n      if (grayscale == null) grayscale = 0;\n      if (rotation == null) rotation = 0;\n      if (invert == null) invert = 0; \n      if (hueRotate == null) hueRotate = 0;\n      if (roundCorners == null) roundCorners = 0;\n      if (perspective == null) perspective = 0;\n      if (quality == null) quality = 100;\n      if (rotateX == null) rotateX = 0;\n      if (rotateY == null) rotateY = 0;\n      if (dropShadow == null) {\n        shadowX = 0;\n        shadowY = 0;\n        shadowSize = 0;\n        shadowColor = \"black\";\n      } else {\n        shadowImg(dropShadow);\n      }\n      if (border == null) {\n        borderThick = 0;\n        borderLine = \"solid\";\n        borderColor = \"black\";\n      } else {\n        borderImage(border)\n      }\n      if (matrix == null) {\n        matrix1 = 1;\n        matrix2 = 0;\n        matrix3 = 0;\n        matrix4 = 1;\n        matrix5 = 0;\n        matrix6 = 0;\n      } else {\n        matrixImg(matrix);\n      }\n      if (translate == null) {\n        translatePx = 0;\n        translatePercent = 0;\n      } else {\n        translateImg(translate);\n      }\n      if (scale == null) {\n        scaleX = 1;\n        scaleY = 1;\n      } else {\n        scaleImg(scale)\n      }\n      if (skew == null) {\n        skewX = 0;\n        skewY = 0;\n      } else {\n        skewImg(skew)\n      }\n    }\n    \n  ////////////////////* Render BI */////////////////////\n  return (\n    <div>\n      {chainParameters()}\n      {images[`${imgName}.webp`] ? <Img src={[images[`${imgName}.webp`], images['placeholder.webp']]} style={{filter:`grayscale(${grayscale}%) blur(${blur}px) brightness(${brightness}%) contrast(${contrast}%) sepia(${sepia}%) invert(${invert}%) saturate(${saturate}%) opacity(${opacity}%) hue-rotate(${hueRotate}deg) drop-shadow(${shadowX}px ${shadowY}px ${shadowSize}px ${shadowColor})`, transform: `matrix(${matrix1}, ${matrix2}, ${matrix3}, ${matrix4}, ${matrix5}, ${matrix6}) translate(${translatePx}px, ${translatePercent}%) scale(${scaleX}, ${scaleY}) skew(${skewX}deg, ${skewY}deg) rotateX(${rotateX}deg) rotateY(${rotateY}deg) perspective(${perspective}px) rotate(${rotation}deg)`, width: `${resizedImageWidth}px`, height: `${resizedImageHeight}px`, borderRadius: `${roundCorners}px`, border: `${borderThick}px ${borderLine} ${borderColor}`}} alt=\"image failed to load\"/> : convertedImg(imgName, quality, originalImageType) }\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}